#!/bin/bash

# (c) 2017 Kurt Pfeifle
# License: MIT
#
# The purpose of this custom AppRun script is to enablesymlinking the AppImage and invoking the corresponding
# binary depending on which symlink name was used to invoke the AppImage.
#
# It also provides some additional help parameters in order to allow faster familiarization with functionality
# embedded in this AppImage.

#stty cols $(tput cols)

if [ $(tput cols) -lt 120 ] ; then
    stty cols 120
fi

#if [ $(tput rows) -lt 67 ] ; then
    stty rows 67
#fi

#### font search paths...
#
# $MAGICK_CONFIGURE_PATH
# $MAGICK_HOME/etc/ImageMagick
# $MAGICK_HOME/share/ImageMagick-7.0.2/config
# $HOME/.config/ImageMagick/
# <client path>/etc/ImageMagick/
# <current directory>/
# $MAGICK_FONT_PATH


### Environment variables...
#
# MAGICK_TMPDIR           path to store temporary files
# LD_LIBRARY_PATH         path to libMagick.so and other libraries


### Configuration Files...
#
# ImageMagick depends on a number of external configuration files which
# include colors.xml, delegates.xml, magic.xml, coder.xml, and others.
# ImageMagick searches for configuration files in the following order, and
# loads them if found:
#
# $MAGICK_CONFIGURE_PATH
# $MAGICK_HOME/etc/ImageMagick
# $MAGICK_HOME/share/ImageMagick-7.0.2/config
# $HOME/.config/ImageMagick/
# <client path>/etc/ImageMagick/
# <current directory>/


#### OpenCL Cache path...
#
# export IMAGEMAGICK_OPENCL_CACHE_DIR=
# export MAGICK_OPENCL_CACHE_DIR=

HERE="$(dirname "$(readlink -f "${0}")")"

export MAGICK_HOME="$HERE/usr:$MAGICK_HOME"   # http://www.imagemagick.org/QuickStart.txt
export MAGICK_CONFIGURE_PATH=$(readlink -f "$HERE/usr/lib/ImageMagick-7.0.7/config-Q16HDRI"):$(readlink -f "$HERE/share/ImageMagick-7"):$(readlink -f "$HERE/etc/ImageMagick-7"):$MAGICK_CONFIGURE_PATH # Undocumented? Wildcards won't work...
export LD_LIBRARY_PATH=$(readlink -f "$HERE/usr/lib"):$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=${HERE}/usr/lib/ImageMagick-7.0.7/modules-Q16HDRI/coders:$LD_LIBRARY_PATH


#env

if [ "x$1" == "xhelp" -o "x$1" == "x--help" ] ; then
    echo ""
    echo " --------------------------------------------------------------------------"
    echo "    All the great ImageMagick functionality inside an AppImage package."
    echo " --------------------------------------------------------------------------"
    echo ""
    echo " (This package uses the AppImage software packaging technology for Linux"
    echo "  ['One App == One File'] for easy availability of the newest ImageMagick"
    echo "  releases across all major Linux distributions.)"
    echo ""
    echo ""
    echo " Usage:  $ARGV0  --help"
    echo " ------             # This message"
    echo ""
    echo "         $ARGV0  animate|compare|composite|conjure|convert|display|identify|import|magick-script|mogrify|montage|stream"
    echo "                    # Run the named sub-command"
    echo ""
    echo "         $ARGV0  --listman"
    echo "                    # List available, embedded manual pages"
    echo ""
    echo "         $ARGV0  --man animate|compare|composite|conjure|convert|display|identify|import|magick-script|mogrify|montage|stream"
    echo "                    # Display embedded manual page(s)"
    echo ""
    echo "         $ARGV0  --listfile"
    echo "                    # List all files embedded in AppImage"
    echo ""
    echo "         $ARGV0  --listexe"
    echo "                    # List all executables embedded in AppImage"
    echo ""
    echo "         $ARGV0  --listreadme"
    echo "                    # List all READMEs embedded in AppImage"
    echo ""
    echo "         $ARGV0  --readme <path/to/readme>"
    echo "                    # Show content of README embedded in AppImage (for path see \"$ARGV0 listreadme\")"
    echo ""
    echo "         $ARGV0  --listdir"
    echo "                    # List all directories embedded in AppImage"
    echo ""
    echo "         $ARGV0  --dir <path/to/dir>"
    echo "                    # Show content of directory embedded in AppImage (for path see \"$ARGV0 listdir\")"
    echo ""
    echo "         $ARGV0  --listhtml"
    echo "                    # List as HTML embedded manual page(s)"
    echo ""
    echo "         $ARGV0  --html index[.html]"
    echo "                    # Use browser to display the entry point into all HTML help page(s)"
    echo ""
    echo "         $ARGV0  --html animate|compare|composite|conjure|convert|display|identify|import|magick-script|mogrify|montage|stream"
    echo "                    # Use browser to display HTML version of embedded manual page(s)"
    echo ""
    echo "         $ARGV0  --html <path/to/file>"
    echo "                    # Use browser to show HTML file embedded in AppImage (for path see \"$ARGV0 listhtml\")"
    echo ""
    echo "         $ARGV0  --appimage-help"
    echo "                    # Show available AppImage options"
    echo ""
    echo " ----------------------------------------------------------------------------------------------------------------------------"
    echo " NOTE: The execution of this AppImage is controlled by a custom AppRun script. The state of this script is experimental and"
    echo " preliminary. Hence it may not work as expected, or miss some functionality. You can hack on this script by unpacking this"
    echo " AppImage into a local sub-directory [currently named 'squashfs-root'] with this command:"
    echo "       $ARGV0 --appimage-extract"
    echo " After you're done with your hacks, repackage the AppImage again with this command:"
    echo "       appimagetool [/path/to/]squashfs-root [/path/to/]ImageMagick.AppImage"
    echo " Latest versions of tools provided by AppImageKit are always available from https://github.com/AppImage/AppImageKit/releases/"
    echo " ----------------------------------------------------------------------------------------------------------------------------"
    echo ""
    exit $?
fi


if [ x"$1" == "xlistman" -o x"$1" == "x--listman" ] ; then
    cd "$HERE"
    echo ""
    find usr/share/man* usr/local/man* -type f | sed 's#^# man #'
    echo ""
    exit $?
fi


if [ x"$1" == "xman"  -o  x"$1" == "x--man" ] ; then
    export MANPATH="$HERE/usr/share/man:$HERE/usr/local/man:$MANPATH"
    shift
    exec man "$@"
fi


if [ x"$1" == "xindex" -o x"$1" == "xindex.html" ] ; then
    xdg-open ${HERE}/usr/share/doc/ImageMagick-7/www/index.html
    sleep 5
    exit $?
fi


if [ x"$1" == "xdir" -o x"$1" == "x--dir" ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo ""
        echo " You must give a path to the directory you want to open."
        echo "   For available directories run \"$ARGV0 listdir\""
        echo ""
    else
        xdg-open $HERE/$1
        sleep 5
    fi
    echo ""
    exit $?
fi


if [ x"$1" == "xlistdir" -o x"$1" == "x--listdir" ] ; then
    cd "$HERE"
    echo ""
    find . -type d | sed 's#^./#  dir #'
    echo ""
    exit $?
fi


if [ x"$1" == "xlistexe" -o x"$1" == "x--listexe" ] ; then
    cd "$HERE"
    echo ""
    find . -type f -o -type l -o -type s -o -type p | grep '/bin/' | sed 's#./usr/bin/#  #' | sort -V
    echo ""
    exit $?
fi


if [ x"$1" == "xlistfile" -o x"$1" == "x--listfile" ] ; then
    cd "$HERE"
    echo ""
    find . -type f -o -type l -o -type s -o -type p | sed 's#^./#  file #'
    echo ""
    exit $?
fi


if [ x"$1" == "xlistreadme" -o x"$1" == "x--listreadme" ] ; then
    cd "$HERE"
    echo ""
    find . -type f -name "*README*" -o -name "*readme*" -o -name "*.txt" | sed 's#^./#  readme #'
    echo ""
    exit $?
fi


if [ x"$1" == "xlisthtml"  -o x"$1" == "x--listhtml" ] ; then
    cd "$HERE"
    echo ""
    find -type f -name "*.html" | sed 's#^./#  html #'
    echo ""
    exit $?
fi


if [ x"$1" == "xreadme" -o x"$1" == "x--readme" ] ; then
    cd "$HERE"
    shift
    if [ x"$1" == "x" ] ; then
        echo ""
        echo " You must give a path to the README you want to open."
        echo "   For available READMEs run \"$ARGV0 listreadme\""
        echo ""
    else
        readmefile=$( find . -type f -name "*README*" -o -name "*readme*" -o -name "*.txt" | grep "${1}" | sort -rV | head -n 1 )
        cat $readmefile
        sleep 5
    fi
    exit $?
fi


if [ x"$1" == "xhtml" -o x"$1" == "x--html" ] ; then
    cd "$HERE"
    shift
    if [ x"$1" == "x" ] ; then
        echo ""
        echo " You must give a path to the HTML file you want to open."
        echo "   For available READMEs run \"$ARGV0 listhtml\""
        echo ""
    else
        htmlfile=$( find . -type f -name "*.html" | grep "${1}" | sort -rV | head -n 1 )
        xdg-open $htmlfile
        sleep 5
    fi
    exit $?
fi


#set -x
if [ ! -z $APPIMAGE ] ; then
    BINARY_NAME=$(basename "$ARGV0")
    APPIMAGE=$APPIMAGE
    CALLED_SUBCMD=$( basename $1 2>/dev/null )
    if [ -e "$HERE/usr/bin/$CALLED_SUBCMD" ] && [ "x$CALLED_SUBCMD" != "x" ]; then
        #echo befor shift dollar_at=$@
        shift
        #echo after shift dollar_at=$@
        #echo CALLED_SUBCMD=$CALLED_SUBCMD
        exec "$HERE/usr/bin/$CALLED_SUBCMD" "$@"
    elif [ -e "$HERE/usr/bin/$BINARY_NAME" ] ; then
        shift
        exec "$HERE/usr/bin/$BINARY_NAME" "$@"
    else
        exec "$HERE/usr/bin/magick" "$@"
    fi
else
      exec "$HERE/usr/bin/magick" "$@"
fi
